// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package gsc.carga_vidas_ativas_ad_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Carga_vidas_ativas_ad Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Carga_vidas_ativas_ad implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Carga_vidas_ativas_ad";
	private final String projectName = "GSC";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Carga_vidas_ativas_ad.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Carga_vidas_ativas_ad.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLDWHOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_GSC_Carga_vidas_ativas_ad = new byte[0];
    static byte[] commonByteArray_GSC_Carga_vidas_ativas_ad = new byte[0];

	
			    public String pac_nome;

				public String getPac_nome () {
					return this.pac_nome;
				}
				
			    public String pac_end;

				public String getPac_end () {
					return this.pac_end;
				}
				
			    public String pac_num;

				public String getPac_num () {
					return this.pac_num;
				}
				
			    public String pac_bairro;

				public String getPac_bairro () {
					return this.pac_bairro;
				}
				
			    public String pac_UF;

				public String getPac_UF () {
					return this.pac_UF;
				}
				
			    public String pac_cep;

				public String getPac_cep () {
					return this.pac_cep;
				}
				
			    public String pac_codigo;

				public String getPac_codigo () {
					return this.pac_codigo;
				}
				
			    public String cnv_desc;

				public String getCnv_desc () {
					return this.cnv_desc;
				}
				
			    public String prod_nome;

				public String getProd_nome () {
					return this.prod_nome;
				}
				
			    public Integer orc_codigo;

				public Integer getOrc_codigo () {
					return this.orc_codigo;
				}
				
			    public String status_orcamento;

				public String getStatus_orcamento () {
					return this.status_orcamento;
				}
				
			    public String situacao_orcamento;

				public String getSituacao_orcamento () {
					return this.situacao_orcamento;
				}
				
			    public String valor_total;

				public String getValor_total () {
					return this.valor_total;
				}
				
			    public String custo_total;

				public String getCusto_total () {
					return this.custo_total;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GSC_Carga_vidas_ativas_ad.length) {
				if(length < 1024 && commonByteArray_GSC_Carga_vidas_ativas_ad.length == 0) {
   					commonByteArray_GSC_Carga_vidas_ativas_ad = new byte[1024];
				} else {
   					commonByteArray_GSC_Carga_vidas_ativas_ad = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GSC_Carga_vidas_ativas_ad, 0, length);
			strReturn = new String(commonByteArray_GSC_Carga_vidas_ativas_ad, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GSC_Carga_vidas_ativas_ad) {

        	try {

        		int length = 0;
		
					this.pac_nome = readString(dis);
					
					this.pac_end = readString(dis);
					
					this.pac_num = readString(dis);
					
					this.pac_bairro = readString(dis);
					
					this.pac_UF = readString(dis);
					
					this.pac_cep = readString(dis);
					
					this.pac_codigo = readString(dis);
					
					this.cnv_desc = readString(dis);
					
					this.prod_nome = readString(dis);
					
						this.orc_codigo = readInteger(dis);
					
					this.status_orcamento = readString(dis);
					
					this.situacao_orcamento = readString(dis);
					
					this.valor_total = readString(dis);
					
					this.custo_total = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.pac_nome,dos);
					
					// String
				
						writeString(this.pac_end,dos);
					
					// String
				
						writeString(this.pac_num,dos);
					
					// String
				
						writeString(this.pac_bairro,dos);
					
					// String
				
						writeString(this.pac_UF,dos);
					
					// String
				
						writeString(this.pac_cep,dos);
					
					// String
				
						writeString(this.pac_codigo,dos);
					
					// String
				
						writeString(this.cnv_desc,dos);
					
					// String
				
						writeString(this.prod_nome,dos);
					
					// Integer
				
						writeInteger(this.orc_codigo,dos);
					
					// String
				
						writeString(this.status_orcamento,dos);
					
					// String
				
						writeString(this.situacao_orcamento,dos);
					
					// String
				
						writeString(this.valor_total,dos);
					
					// String
				
						writeString(this.custo_total,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pac_nome="+pac_nome);
		sb.append(",pac_end="+pac_end);
		sb.append(",pac_num="+pac_num);
		sb.append(",pac_bairro="+pac_bairro);
		sb.append(",pac_UF="+pac_UF);
		sb.append(",pac_cep="+pac_cep);
		sb.append(",pac_codigo="+pac_codigo);
		sb.append(",cnv_desc="+cnv_desc);
		sb.append(",prod_nome="+prod_nome);
		sb.append(",orc_codigo="+String.valueOf(orc_codigo));
		sb.append(",status_orcamento="+status_orcamento);
		sb.append(",situacao_orcamento="+situacao_orcamento);
		sb.append(",valor_total="+valor_total);
		sb.append(",custo_total="+custo_total);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_GSC_Carga_vidas_ativas_ad = new byte[0];
    static byte[] commonByteArray_GSC_Carga_vidas_ativas_ad = new byte[0];

	
			    public String pac_nome;

				public String getPac_nome () {
					return this.pac_nome;
				}
				
			    public String pac_end;

				public String getPac_end () {
					return this.pac_end;
				}
				
			    public String pac_num;

				public String getPac_num () {
					return this.pac_num;
				}
				
			    public String pac_bairro;

				public String getPac_bairro () {
					return this.pac_bairro;
				}
				
			    public String pac_UF;

				public String getPac_UF () {
					return this.pac_UF;
				}
				
			    public String pac_cep;

				public String getPac_cep () {
					return this.pac_cep;
				}
				
			    public String pac_codigo;

				public String getPac_codigo () {
					return this.pac_codigo;
				}
				
			    public String cnv_desc;

				public String getCnv_desc () {
					return this.cnv_desc;
				}
				
			    public String prod_nome;

				public String getProd_nome () {
					return this.prod_nome;
				}
				
			    public Integer orc_codigo;

				public Integer getOrc_codigo () {
					return this.orc_codigo;
				}
				
			    public String status_orcamento;

				public String getStatus_orcamento () {
					return this.status_orcamento;
				}
				
			    public String situacao_orcamento;

				public String getSituacao_orcamento () {
					return this.situacao_orcamento;
				}
				
			    public String valor_total;

				public String getValor_total () {
					return this.valor_total;
				}
				
			    public String custo_total;

				public String getCusto_total () {
					return this.custo_total;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GSC_Carga_vidas_ativas_ad.length) {
				if(length < 1024 && commonByteArray_GSC_Carga_vidas_ativas_ad.length == 0) {
   					commonByteArray_GSC_Carga_vidas_ativas_ad = new byte[1024];
				} else {
   					commonByteArray_GSC_Carga_vidas_ativas_ad = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GSC_Carga_vidas_ativas_ad, 0, length);
			strReturn = new String(commonByteArray_GSC_Carga_vidas_ativas_ad, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GSC_Carga_vidas_ativas_ad) {

        	try {

        		int length = 0;
		
					this.pac_nome = readString(dis);
					
					this.pac_end = readString(dis);
					
					this.pac_num = readString(dis);
					
					this.pac_bairro = readString(dis);
					
					this.pac_UF = readString(dis);
					
					this.pac_cep = readString(dis);
					
					this.pac_codigo = readString(dis);
					
					this.cnv_desc = readString(dis);
					
					this.prod_nome = readString(dis);
					
						this.orc_codigo = readInteger(dis);
					
					this.status_orcamento = readString(dis);
					
					this.situacao_orcamento = readString(dis);
					
					this.valor_total = readString(dis);
					
					this.custo_total = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.pac_nome,dos);
					
					// String
				
						writeString(this.pac_end,dos);
					
					// String
				
						writeString(this.pac_num,dos);
					
					// String
				
						writeString(this.pac_bairro,dos);
					
					// String
				
						writeString(this.pac_UF,dos);
					
					// String
				
						writeString(this.pac_cep,dos);
					
					// String
				
						writeString(this.pac_codigo,dos);
					
					// String
				
						writeString(this.cnv_desc,dos);
					
					// String
				
						writeString(this.prod_nome,dos);
					
					// Integer
				
						writeInteger(this.orc_codigo,dos);
					
					// String
				
						writeString(this.status_orcamento,dos);
					
					// String
				
						writeString(this.situacao_orcamento,dos);
					
					// String
				
						writeString(this.valor_total,dos);
					
					// String
				
						writeString(this.custo_total,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pac_nome="+pac_nome);
		sb.append(",pac_end="+pac_end);
		sb.append(",pac_num="+pac_num);
		sb.append(",pac_bairro="+pac_bairro);
		sb.append(",pac_UF="+pac_UF);
		sb.append(",pac_cep="+pac_cep);
		sb.append(",pac_codigo="+pac_codigo);
		sb.append(",cnv_desc="+cnv_desc);
		sb.append(",prod_nome="+prod_nome);
		sb.append(",orc_codigo="+String.valueOf(orc_codigo));
		sb.append(",status_orcamento="+status_orcamento);
		sb.append(",situacao_orcamento="+situacao_orcamento);
		sb.append(",valor_total="+valor_total);
		sb.append(",custo_total="+custo_total);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row1Struct row2 = row1;





	
	/**
	 * [tSQLDWHOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLDWHOutput_1", false);
		start_Hash.put("tSQLDWHOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tSQLDWHOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tSQLDWHOutput_1 = 0;
		



int nb_line_tSQLDWHOutput_1 = 0;
int nb_line_update_tSQLDWHOutput_1 = 0;
int nb_line_inserted_tSQLDWHOutput_1 = 0;
int nb_line_deleted_tSQLDWHOutput_1 = 0;
int nb_line_rejected_tSQLDWHOutput_1 = 0;

int deletedCount_tSQLDWHOutput_1=0;
int updatedCount_tSQLDWHOutput_1=0;
int insertedCount_tSQLDWHOutput_1=0;
int rejectedCount_tSQLDWHOutput_1=0;
String dbschema_tSQLDWHOutput_1 = null;
String tableName_tSQLDWHOutput_1 = null;
boolean whetherReject_tSQLDWHOutput_1 = false;

java.util.Calendar calendar_tSQLDWHOutput_1 = java.util.Calendar.getInstance();
long year1_tSQLDWHOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tSQLDWHOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tSQLDWHOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tSQLDWHOutput_1;

java.util.Calendar calendar_datetimeoffset_tSQLDWHOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


java.sql.Connection conn_tSQLDWHOutput_1 = null;
String dbUser_tSQLDWHOutput_1 = null;
    dbschema_tSQLDWHOutput_1 = "telemetria";
    String driverClass_tSQLDWHOutput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
	
    java.lang.Class.forName(driverClass_tSQLDWHOutput_1);
    String port_tSQLDWHOutput_1 = "1433";
    String dbname_tSQLDWHOutput_1 = "gsc-db" ;
    String url_tSQLDWHOutput_1 = "jdbc:sqlserver://" + "gsc-db-server.database.windows.net" ; 
    if (!"".equals(port_tSQLDWHOutput_1)) {
    	url_tSQLDWHOutput_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tSQLDWHOutput_1)) {		    
		    	url_tSQLDWHOutput_1 += ";databaseName=" + "gsc-db"; 
	
    }
    url_tSQLDWHOutput_1 += ";applicationName=Talend;" + "";
    dbUser_tSQLDWHOutput_1 = "gscadmin";

 
	final String decryptedPassword_tSQLDWHOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:TqDdKcZi1p+kCDs0YHNMUvfMkCi+exs2NH3lJcQ42j5e2l2WQAWm");

    String dbPwd_tSQLDWHOutput_1 = decryptedPassword_tSQLDWHOutput_1;	
    conn_tSQLDWHOutput_1 = java.sql.DriverManager.getConnection(url_tSQLDWHOutput_1,dbUser_tSQLDWHOutput_1,dbPwd_tSQLDWHOutput_1);
	
   int batchSize_tSQLDWHOutput_1 = 10000;
   int batchSizeCounter_tSQLDWHOutput_1=0;

if(dbschema_tSQLDWHOutput_1 == null || dbschema_tSQLDWHOutput_1.trim().length() == 0) {
    tableName_tSQLDWHOutput_1 = "tb_vidas_ativas_ad";
} else {
    tableName_tSQLDWHOutput_1 = dbschema_tSQLDWHOutput_1 + "].[" + "tb_vidas_ativas_ad";
}
	int count_tSQLDWHOutput_1=0;

		resourceMap.put("conn_tSQLDWHOutput_1", conn_tSQLDWHOutput_1);
	
        conn_tSQLDWHOutput_1.setAutoCommit(false);
        int commitEvery_tSQLDWHOutput_1 = 10000;
        int commitCounter_tSQLDWHOutput_1 = 0;

        String insert_tSQLDWHOutput_1 = "INSERT INTO [" + tableName_tSQLDWHOutput_1 + "] ([pac_nome],[pac_end],[pac_num],[pac_bairro],[pac_UF],[pac_cep],[pac_codigo],[cnv_desc],[prod_nome],[orc_codigo],[status_orcamento],[situacao_orcamento],[valor_total],[custo_total]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tSQLDWHOutput_1 = conn_tSQLDWHOutput_1.prepareStatement(insert_tSQLDWHOutput_1);
        resourceMap.put("pstmt_tSQLDWHOutput_1", pstmt_tSQLDWHOutput_1);


 



/**
 * [tSQLDWHOutput_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tLogRow_1 = 0;
		

 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:s+u2+0ojTaHxoTunL7OAaLRQLj9c7W354muiR2RmqPM70DpnuYo=");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + "10.0.2.4" + ":" + "3306" + "/" + "see" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select\na.pac_nome as 'Paciente',\na.pac_end as 'Endereço',\na.pac_num as 'N°',\na.pac_comp as 'Complemento',\na.pac_ba"
+"irro as 'Bairro',\na.`pac_UF` as 'UF',\na.`pac_CEP` as 'CEP',\na.pac_codigo as 'Prontuário',\nb.cnv_desc as 'Convenio',"
+"\ne.prod_nome as 'Produto',\nd.orc_codigo as 'Orçamento',\ncase\n    when d.orc_status = 1 then 'Aberto'\n    when d.orc_"
+"status = 2 then 'Recusado'\n    when d.orc_status = 3 then 'Aprovado'\n    when d.orc_status = 4 then 'Reaberto'\n    wh"
+"en d.orc_status = 5 then 'Avaliação'\n    when d.orc_status = 6 then 'Perdas'\n    else '' end as 'Status Orçamento',\nc"
+"ase\n    when d.orc_situacao = 1 then 'Ativo'\n    else 'Encerrado' end as 'Situacão Orçamento',\n'' as 'Valor Total',\n"
+"'' as 'Custo Total'\nfrom see_paciente a\ninner join see_convenio b on b.cnv_codigo = a.cnv_codigo\ninner join see_statu"
+"s c on c.sts_codigo = a.sts_codigo\ninner join see_orcamento d on d.pac_codigo = a.pac_codigo\ninner join see_produto e "
+"on e.prod_codigo = d.prod_codigo\nwhere a.cnv_codigo = 123 and a.sts_codigo in (5,10,14,17,18,29,22) group by a.pac_codi"
+"go;";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.pac_nome = null;
							} else {
	                         		
        	row1.pac_nome = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.pac_end = null;
							} else {
	                         		
        	row1.pac_end = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.pac_num = null;
							} else {
	                         		
        	row1.pac_num = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.pac_bairro = null;
							} else {
	                         		
        	row1.pac_bairro = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.pac_UF = null;
							} else {
	                         		
        	row1.pac_UF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.pac_cep = null;
							} else {
	                         		
        	row1.pac_cep = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.pac_codigo = null;
							} else {
	                         		
        	row1.pac_codigo = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.cnv_desc = null;
							} else {
	                         		
        	row1.cnv_desc = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.prod_nome = null;
							} else {
	                         		
        	row1.prod_nome = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.orc_codigo = null;
							} else {
		                          
            row1.orc_codigo = rs_tDBInput_1.getInt(10);
            if(rs_tDBInput_1.wasNull()){
                    row1.orc_codigo = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.status_orcamento = null;
							} else {
	                         		
        	row1.status_orcamento = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.situacao_orcamento = null;
							} else {
	                         		
        	row1.situacao_orcamento = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.valor_total = null;
							} else {
	                         		
        	row1.valor_total = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.custo_total = null;
							} else {
	                         		
        	row1.custo_total = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

 
     row2 = row1;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tSQLDWHOutput_1 main ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					



        whetherReject_tSQLDWHOutput_1 = false;
                    if(row2.pac_nome == null) {
pstmt_tSQLDWHOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(1, row2.pac_nome);
}

                    if(row2.pac_end == null) {
pstmt_tSQLDWHOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(2, row2.pac_end);
}

                    if(row2.pac_num == null) {
pstmt_tSQLDWHOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(3, row2.pac_num);
}

                    if(row2.pac_bairro == null) {
pstmt_tSQLDWHOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(4, row2.pac_bairro);
}

                    if(row2.pac_UF == null) {
pstmt_tSQLDWHOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(5, row2.pac_UF);
}

                    if(row2.pac_cep == null) {
pstmt_tSQLDWHOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(6, row2.pac_cep);
}

                    if(row2.pac_codigo == null) {
pstmt_tSQLDWHOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(7, row2.pac_codigo);
}

                    if(row2.cnv_desc == null) {
pstmt_tSQLDWHOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(8, row2.cnv_desc);
}

                    if(row2.prod_nome == null) {
pstmt_tSQLDWHOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(9, row2.prod_nome);
}

                    if(row2.orc_codigo == null) {
pstmt_tSQLDWHOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tSQLDWHOutput_1.setInt(10, row2.orc_codigo);
}

                    if(row2.status_orcamento == null) {
pstmt_tSQLDWHOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(11, row2.status_orcamento);
}

                    if(row2.situacao_orcamento == null) {
pstmt_tSQLDWHOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(12, row2.situacao_orcamento);
}

                    if(row2.valor_total == null) {
pstmt_tSQLDWHOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(13, row2.valor_total);
}

                    if(row2.custo_total == null) {
pstmt_tSQLDWHOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(14, row2.custo_total);
}


        		pstmt_tSQLDWHOutput_1.addBatch();
        		nb_line_tSQLDWHOutput_1++;
        		
    		 
    		  batchSizeCounter_tSQLDWHOutput_1++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tSQLDWHOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tSQLDWHOutput_1) throws Exception {
                try {
						
						for(int countEach_tSQLDWHOutput_1: pstmt_tSQLDWHOutput_1.executeBatch()) {
							if(countEach_tSQLDWHOutput_1 == -2 || countEach_tSQLDWHOutput_1 == -3) {
								break;
							}
							counter += countEach_tSQLDWHOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tSQLDWHOutput_1 = 0;
					for(int countEach_tSQLDWHOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tSQLDWHOutput_1 < 0 ? 0 : countEach_tSQLDWHOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tSQLDWHOutput_1) throws Exception {
                try {
                		
						for(int countEach_tSQLDWHOutput_1: pstmt_tSQLDWHOutput_1.executeBatch()) {
							if(countEach_tSQLDWHOutput_1 == -2 || countEach_tSQLDWHOutput_1 == -3) {
								break;
							}
							counter += countEach_tSQLDWHOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tSQLDWHOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tSQLDWHOutput_1 < 0 ? 0 : countEach_tSQLDWHOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tSQLDWHOutput_1 > 0) && (batchSize_tSQLDWHOutput_1 <= batchSizeCounter_tSQLDWHOutput_1)) {
    		
    		            
            	    		insertedCount_tSQLDWHOutput_1 = new LimitBytesHelper_tSQLDWHOutput_1().limitBytePart1(insertedCount_tSQLDWHOutput_1,pstmt_tSQLDWHOutput_1);
            	    	
    			
			    batchSizeCounter_tSQLDWHOutput_1 = 0;
			}
    		

    	////////////commit every////////////
    			
    		    commitCounter_tSQLDWHOutput_1++;
                if(commitEvery_tSQLDWHOutput_1 <= commitCounter_tSQLDWHOutput_1) {
                if ((batchSize_tSQLDWHOutput_1 > 0) && (batchSizeCounter_tSQLDWHOutput_1 > 0)) {
    		            
            	    		insertedCount_tSQLDWHOutput_1 = new LimitBytesHelper_tSQLDWHOutput_1().limitBytePart1(insertedCount_tSQLDWHOutput_1,pstmt_tSQLDWHOutput_1);
            	    	
            	batchSizeCounter_tSQLDWHOutput_1 = 0;
            	}
                	
                	conn_tSQLDWHOutput_1.commit();
            		
                	commitCounter_tSQLDWHOutput_1=0;
                }

 


	tos_count_tSQLDWHOutput_1++;

/**
 * [tSQLDWHOutput_1 main ] stop
 */
	
	/**
	 * [tSQLDWHOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	

 



/**
 * [tSQLDWHOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tSQLDWHOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	

 



/**
 * [tSQLDWHOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tSQLDWHOutput_1 end ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	



                try {
						int countSum_tSQLDWHOutput_1 = 0;
						if (pstmt_tSQLDWHOutput_1 != null && batchSizeCounter_tSQLDWHOutput_1 > 0) {
							
							for(int countEach_tSQLDWHOutput_1: pstmt_tSQLDWHOutput_1.executeBatch()) {
								if(countEach_tSQLDWHOutput_1 == -2 || countEach_tSQLDWHOutput_1 == -3) {
									break;
								}
								countSum_tSQLDWHOutput_1 += countEach_tSQLDWHOutput_1;
							}
							
						}
            	    	
            	    		insertedCount_tSQLDWHOutput_1 += countSum_tSQLDWHOutput_1;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tSQLDWHOutput_1 = 0;
					for(int countEach_tSQLDWHOutput_1: e.getUpdateCounts()) {
						countSum_tSQLDWHOutput_1 += (countEach_tSQLDWHOutput_1 < 0 ? 0 : countEach_tSQLDWHOutput_1);
					}
					
            	    		insertedCount_tSQLDWHOutput_1 += countSum_tSQLDWHOutput_1;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_tSQLDWHOutput_1 != null) {
			
				pstmt_tSQLDWHOutput_1.close();
				resourceMap.remove("pstmt_tSQLDWHOutput_1");
			
        }
    resourceMap.put("statementClosed_tSQLDWHOutput_1", true);
            conn_tSQLDWHOutput_1.commit();
			
        conn_tSQLDWHOutput_1 .close();
        resourceMap.put("finish_tSQLDWHOutput_1", true);

	nb_line_deleted_tSQLDWHOutput_1=nb_line_deleted_tSQLDWHOutput_1+ deletedCount_tSQLDWHOutput_1;
	nb_line_update_tSQLDWHOutput_1=nb_line_update_tSQLDWHOutput_1 + updatedCount_tSQLDWHOutput_1;
	nb_line_inserted_tSQLDWHOutput_1=nb_line_inserted_tSQLDWHOutput_1 + insertedCount_tSQLDWHOutput_1;
	nb_line_rejected_tSQLDWHOutput_1=nb_line_rejected_tSQLDWHOutput_1 + rejectedCount_tSQLDWHOutput_1;
	
        globalMap.put("tSQLDWHOutput_1_NB_LINE",nb_line_tSQLDWHOutput_1);
        globalMap.put("tSQLDWHOutput_1_NB_LINE_UPDATED",nb_line_update_tSQLDWHOutput_1);
        globalMap.put("tSQLDWHOutput_1_NB_LINE_INSERTED",nb_line_inserted_tSQLDWHOutput_1);
        globalMap.put("tSQLDWHOutput_1_NB_LINE_DELETED",nb_line_deleted_tSQLDWHOutput_1);
        globalMap.put("tSQLDWHOutput_1_NB_LINE_REJECTED", nb_line_rejected_tSQLDWHOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tSQLDWHOutput_1", true);
end_Hash.put("tSQLDWHOutput_1", System.currentTimeMillis());




/**
 * [tSQLDWHOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tSQLDWHOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tSQLDWHOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tSQLDWHOutput_1 = null;
                if ((pstmtToClose_tSQLDWHOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tSQLDWHOutput_1")) != null) {
                    pstmtToClose_tSQLDWHOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tSQLDWHOutput_1") == null){
            java.sql.Connection ctn_tSQLDWHOutput_1 = null;
            if((ctn_tSQLDWHOutput_1 = (java.sql.Connection)resourceMap.get("conn_tSQLDWHOutput_1")) != null){
                try {
                    ctn_tSQLDWHOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tSQLDWHOutput_1) {
                    String errorMessage_tSQLDWHOutput_1 = "failed to close the connection in tSQLDWHOutput_1 :" + sqlEx_tSQLDWHOutput_1.getMessage();
                    System.err.println(errorMessage_tSQLDWHOutput_1);
                }
            }
        }
    }
 



/**
 * [tSQLDWHOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Carga_vidas_ativas_ad Carga_vidas_ativas_adClass = new Carga_vidas_ativas_ad();

        int exitCode = Carga_vidas_ativas_adClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Carga_vidas_ativas_ad.class.getClassLoader().getResourceAsStream("gsc/carga_vidas_ativas_ad_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Carga_vidas_ativas_ad.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Carga_vidas_ativas_ad");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     62195 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 de Julho de 2020 10h54min27s BRT
 ************************************************************************************************/