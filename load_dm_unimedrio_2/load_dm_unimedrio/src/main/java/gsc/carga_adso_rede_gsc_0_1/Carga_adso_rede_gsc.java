// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package gsc.carga_adso_rede_gsc_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Carga_adso_rede_gsc Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Carga_adso_rede_gsc implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Carga_adso_rede_gsc";
	private final String projectName = "GSC";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Carga_adso_rede_gsc.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Carga_adso_rede_gsc.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLDWHOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLDWHOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLDWHOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class outStruct implements routines.system.IPersistableRow<outStruct> {
    final static byte[] commonByteArrayLock_GSC_Carga_adso_rede_gsc = new byte[0];
    static byte[] commonByteArray_GSC_Carga_adso_rede_gsc = new byte[0];

	
			    public int pac_codigo;

				public int getPac_codigo () {
					return this.pac_codigo;
				}
				
			    public String pac_nome;

				public String getPac_nome () {
					return this.pac_nome;
				}
				
			    public java.util.Date pac_dt_nasc;

				public java.util.Date getPac_dt_nasc () {
					return this.pac_dt_nasc;
				}
				
			    public String pac_sexo;

				public String getPac_sexo () {
					return this.pac_sexo;
				}
				
			    public String cnv_nome;

				public String getCnv_nome () {
					return this.cnv_nome;
				}
				
			    public String pac_end;

				public String getPac_end () {
					return this.pac_end;
				}
				
			    public String pac_num;

				public String getPac_num () {
					return this.pac_num;
				}
				
			    public String pac_bairro;

				public String getPac_bairro () {
					return this.pac_bairro;
				}
				
			    public String pac_cid;

				public String getPac_cid () {
					return this.pac_cid;
				}
				
			    public String pac_UF;

				public String getPac_UF () {
					return this.pac_UF;
				}
				
			    public String pac_CEP;

				public String getPac_CEP () {
					return this.pac_CEP;
				}
				
			    public String nivel_nome;

				public String getNivel_nome () {
					return this.nivel_nome;
				}
				
			    public String usu_login;

				public String getUsu_login () {
					return this.usu_login;
				}
				
			    public String usu_nome;

				public String getUsu_nome () {
					return this.usu_nome;
				}
				
			    public java.util.Date evo_data;

				public java.util.Date getEvo_data () {
					return this.evo_data;
				}
				
			    public java.util.Date dt_atlz;

				public java.util.Date getDt_atlz () {
					return this.dt_atlz;
				}
				
			    public String fis_nome;

				public String getFis_nome () {
					return this.fis_nome;
				}
				
			    public String evo_hr_inc;

				public String getEvo_hr_inc () {
					return this.evo_hr_inc;
				}
				
			    public String data_evolucao;

				public String getData_evolucao () {
					return this.data_evolucao;
				}
				
			    public String origem;

				public String getOrigem () {
					return this.origem;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GSC_Carga_adso_rede_gsc.length) {
				if(length < 1024 && commonByteArray_GSC_Carga_adso_rede_gsc.length == 0) {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[1024];
				} else {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length);
			strReturn = new String(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GSC_Carga_adso_rede_gsc) {

        	try {

        		int length = 0;
		
			        this.pac_codigo = dis.readInt();
					
					this.pac_nome = readString(dis);
					
					this.pac_dt_nasc = readDate(dis);
					
					this.pac_sexo = readString(dis);
					
					this.cnv_nome = readString(dis);
					
					this.pac_end = readString(dis);
					
					this.pac_num = readString(dis);
					
					this.pac_bairro = readString(dis);
					
					this.pac_cid = readString(dis);
					
					this.pac_UF = readString(dis);
					
					this.pac_CEP = readString(dis);
					
					this.nivel_nome = readString(dis);
					
					this.usu_login = readString(dis);
					
					this.usu_nome = readString(dis);
					
					this.evo_data = readDate(dis);
					
					this.dt_atlz = readDate(dis);
					
					this.fis_nome = readString(dis);
					
					this.evo_hr_inc = readString(dis);
					
					this.data_evolucao = readString(dis);
					
					this.origem = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.pac_codigo);
					
					// String
				
						writeString(this.pac_nome,dos);
					
					// java.util.Date
				
						writeDate(this.pac_dt_nasc,dos);
					
					// String
				
						writeString(this.pac_sexo,dos);
					
					// String
				
						writeString(this.cnv_nome,dos);
					
					// String
				
						writeString(this.pac_end,dos);
					
					// String
				
						writeString(this.pac_num,dos);
					
					// String
				
						writeString(this.pac_bairro,dos);
					
					// String
				
						writeString(this.pac_cid,dos);
					
					// String
				
						writeString(this.pac_UF,dos);
					
					// String
				
						writeString(this.pac_CEP,dos);
					
					// String
				
						writeString(this.nivel_nome,dos);
					
					// String
				
						writeString(this.usu_login,dos);
					
					// String
				
						writeString(this.usu_nome,dos);
					
					// java.util.Date
				
						writeDate(this.evo_data,dos);
					
					// java.util.Date
				
						writeDate(this.dt_atlz,dos);
					
					// String
				
						writeString(this.fis_nome,dos);
					
					// String
				
						writeString(this.evo_hr_inc,dos);
					
					// String
				
						writeString(this.data_evolucao,dos);
					
					// String
				
						writeString(this.origem,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pac_codigo="+String.valueOf(pac_codigo));
		sb.append(",pac_nome="+pac_nome);
		sb.append(",pac_dt_nasc="+String.valueOf(pac_dt_nasc));
		sb.append(",pac_sexo="+pac_sexo);
		sb.append(",cnv_nome="+cnv_nome);
		sb.append(",pac_end="+pac_end);
		sb.append(",pac_num="+pac_num);
		sb.append(",pac_bairro="+pac_bairro);
		sb.append(",pac_cid="+pac_cid);
		sb.append(",pac_UF="+pac_UF);
		sb.append(",pac_CEP="+pac_CEP);
		sb.append(",nivel_nome="+nivel_nome);
		sb.append(",usu_login="+usu_login);
		sb.append(",usu_nome="+usu_nome);
		sb.append(",evo_data="+String.valueOf(evo_data));
		sb.append(",dt_atlz="+String.valueOf(dt_atlz));
		sb.append(",fis_nome="+fis_nome);
		sb.append(",evo_hr_inc="+evo_hr_inc);
		sb.append(",data_evolucao="+data_evolucao);
		sb.append(",origem="+origem);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_GSC_Carga_adso_rede_gsc = new byte[0];
    static byte[] commonByteArray_GSC_Carga_adso_rede_gsc = new byte[0];

	
			    public int pac_codigo;

				public int getPac_codigo () {
					return this.pac_codigo;
				}
				
			    public String pac_nome;

				public String getPac_nome () {
					return this.pac_nome;
				}
				
			    public java.util.Date pac_dt_nasc;

				public java.util.Date getPac_dt_nasc () {
					return this.pac_dt_nasc;
				}
				
			    public String pac_sexo;

				public String getPac_sexo () {
					return this.pac_sexo;
				}
				
			    public String cnv_nome;

				public String getCnv_nome () {
					return this.cnv_nome;
				}
				
			    public String pac_end;

				public String getPac_end () {
					return this.pac_end;
				}
				
			    public String pac_num;

				public String getPac_num () {
					return this.pac_num;
				}
				
			    public String pac_bairro;

				public String getPac_bairro () {
					return this.pac_bairro;
				}
				
			    public String pac_cid;

				public String getPac_cid () {
					return this.pac_cid;
				}
				
			    public String pac_UF;

				public String getPac_UF () {
					return this.pac_UF;
				}
				
			    public String pac_CEP;

				public String getPac_CEP () {
					return this.pac_CEP;
				}
				
			    public String nivel_nome;

				public String getNivel_nome () {
					return this.nivel_nome;
				}
				
			    public String usu_login;

				public String getUsu_login () {
					return this.usu_login;
				}
				
			    public String usu_nome;

				public String getUsu_nome () {
					return this.usu_nome;
				}
				
			    public java.util.Date evo_data;

				public java.util.Date getEvo_data () {
					return this.evo_data;
				}
				
			    public java.util.Date dt_atlz;

				public java.util.Date getDt_atlz () {
					return this.dt_atlz;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GSC_Carga_adso_rede_gsc.length) {
				if(length < 1024 && commonByteArray_GSC_Carga_adso_rede_gsc.length == 0) {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[1024];
				} else {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length);
			strReturn = new String(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GSC_Carga_adso_rede_gsc) {

        	try {

        		int length = 0;
		
			        this.pac_codigo = dis.readInt();
					
					this.pac_nome = readString(dis);
					
					this.pac_dt_nasc = readDate(dis);
					
					this.pac_sexo = readString(dis);
					
					this.cnv_nome = readString(dis);
					
					this.pac_end = readString(dis);
					
					this.pac_num = readString(dis);
					
					this.pac_bairro = readString(dis);
					
					this.pac_cid = readString(dis);
					
					this.pac_UF = readString(dis);
					
					this.pac_CEP = readString(dis);
					
					this.nivel_nome = readString(dis);
					
					this.usu_login = readString(dis);
					
					this.usu_nome = readString(dis);
					
					this.evo_data = readDate(dis);
					
					this.dt_atlz = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.pac_codigo);
					
					// String
				
						writeString(this.pac_nome,dos);
					
					// java.util.Date
				
						writeDate(this.pac_dt_nasc,dos);
					
					// String
				
						writeString(this.pac_sexo,dos);
					
					// String
				
						writeString(this.cnv_nome,dos);
					
					// String
				
						writeString(this.pac_end,dos);
					
					// String
				
						writeString(this.pac_num,dos);
					
					// String
				
						writeString(this.pac_bairro,dos);
					
					// String
				
						writeString(this.pac_cid,dos);
					
					// String
				
						writeString(this.pac_UF,dos);
					
					// String
				
						writeString(this.pac_CEP,dos);
					
					// String
				
						writeString(this.nivel_nome,dos);
					
					// String
				
						writeString(this.usu_login,dos);
					
					// String
				
						writeString(this.usu_nome,dos);
					
					// java.util.Date
				
						writeDate(this.evo_data,dos);
					
					// java.util.Date
				
						writeDate(this.dt_atlz,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pac_codigo="+String.valueOf(pac_codigo));
		sb.append(",pac_nome="+pac_nome);
		sb.append(",pac_dt_nasc="+String.valueOf(pac_dt_nasc));
		sb.append(",pac_sexo="+pac_sexo);
		sb.append(",cnv_nome="+cnv_nome);
		sb.append(",pac_end="+pac_end);
		sb.append(",pac_num="+pac_num);
		sb.append(",pac_bairro="+pac_bairro);
		sb.append(",pac_cid="+pac_cid);
		sb.append(",pac_UF="+pac_UF);
		sb.append(",pac_CEP="+pac_CEP);
		sb.append(",nivel_nome="+nivel_nome);
		sb.append(",usu_login="+usu_login);
		sb.append(",usu_nome="+usu_nome);
		sb.append(",evo_data="+String.valueOf(evo_data));
		sb.append(",dt_atlz="+String.valueOf(dt_atlz));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
outStruct out = new outStruct();





	
	/**
	 * [tSQLDWHOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLDWHOutput_1", false);
		start_Hash.put("tSQLDWHOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tSQLDWHOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out");
					}
				
		int tos_count_tSQLDWHOutput_1 = 0;
		



int nb_line_tSQLDWHOutput_1 = 0;
int nb_line_update_tSQLDWHOutput_1 = 0;
int nb_line_inserted_tSQLDWHOutput_1 = 0;
int nb_line_deleted_tSQLDWHOutput_1 = 0;
int nb_line_rejected_tSQLDWHOutput_1 = 0;

int deletedCount_tSQLDWHOutput_1=0;
int updatedCount_tSQLDWHOutput_1=0;
int insertedCount_tSQLDWHOutput_1=0;
int rejectedCount_tSQLDWHOutput_1=0;
String dbschema_tSQLDWHOutput_1 = null;
String tableName_tSQLDWHOutput_1 = null;
boolean whetherReject_tSQLDWHOutput_1 = false;

java.util.Calendar calendar_tSQLDWHOutput_1 = java.util.Calendar.getInstance();
long year1_tSQLDWHOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tSQLDWHOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tSQLDWHOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tSQLDWHOutput_1;

java.util.Calendar calendar_datetimeoffset_tSQLDWHOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


java.sql.Connection conn_tSQLDWHOutput_1 = null;
String dbUser_tSQLDWHOutput_1 = null;
    dbschema_tSQLDWHOutput_1 = "telemetria";
    String driverClass_tSQLDWHOutput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
	
    java.lang.Class.forName(driverClass_tSQLDWHOutput_1);
    String port_tSQLDWHOutput_1 = "1433";
    String dbname_tSQLDWHOutput_1 = "gsc-db" ;
    String url_tSQLDWHOutput_1 = "jdbc:sqlserver://" + "gsc-db-server.database.windows.net" ; 
    if (!"".equals(port_tSQLDWHOutput_1)) {
    	url_tSQLDWHOutput_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tSQLDWHOutput_1)) {		    
		    	url_tSQLDWHOutput_1 += ";databaseName=" + "gsc-db"; 
	
    }
    url_tSQLDWHOutput_1 += ";applicationName=Talend;" + "";
    dbUser_tSQLDWHOutput_1 = "gscadmin";

 
	final String decryptedPassword_tSQLDWHOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:+SPAk4WC3Q66QPJSXJDhMxN5l/j+fMQ15+WmCZXUYtljm94Q3T71");

    String dbPwd_tSQLDWHOutput_1 = decryptedPassword_tSQLDWHOutput_1;	
    conn_tSQLDWHOutput_1 = java.sql.DriverManager.getConnection(url_tSQLDWHOutput_1,dbUser_tSQLDWHOutput_1,dbPwd_tSQLDWHOutput_1);
	
   int batchSize_tSQLDWHOutput_1 = 10000;
   int batchSizeCounter_tSQLDWHOutput_1=0;

if(dbschema_tSQLDWHOutput_1 == null || dbschema_tSQLDWHOutput_1.trim().length() == 0) {
    tableName_tSQLDWHOutput_1 = "tb_adso_rede_gsc";
} else {
    tableName_tSQLDWHOutput_1 = dbschema_tSQLDWHOutput_1 + "].[" + "tb_adso_rede_gsc";
}
	int count_tSQLDWHOutput_1=0;

		resourceMap.put("conn_tSQLDWHOutput_1", conn_tSQLDWHOutput_1);
	
        conn_tSQLDWHOutput_1.setAutoCommit(false);
        int commitEvery_tSQLDWHOutput_1 = 10000;
        int commitCounter_tSQLDWHOutput_1 = 0;

        String insert_tSQLDWHOutput_1 = "INSERT INTO [" + tableName_tSQLDWHOutput_1 + "] ([pac_codigo],[pac_nome],[pac_dt_nasc],[pac_sexo],[cnv_nome],[pac_end],[pac_num],[pac_bairro],[pac_cid],[pac_UF],[pac_CEP],[nivel_nome],[usu_login],[usu_nome],[evo_data],[dt_atlz],[fis_nome],[evo_hr_inc],[data_evolucao],[origem]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tSQLDWHOutput_1 = conn_tSQLDWHOutput_1.prepareStatement(insert_tSQLDWHOutput_1);
        resourceMap.put("pstmt_tSQLDWHOutput_1", pstmt_tSQLDWHOutput_1);


 



/**
 * [tSQLDWHOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
outStruct out_tmp = new outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:11H1dp9P+ppKv5Lh8UtT/dAcMqgWBlWHnH5PE9TNdUkODv8zwSY=");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + "10.0.2.4" + ":" + "3306" + "/" + "gsc" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select \nb.pac_codigo\n,b.pac_nome\n,b.pac_dt_nasc\n,b.pac_sexo\n,c.cnv_nome\n,b.pac_end\n,b.pac_num\n,b.pac_bairro\n,b"
+".pac_cid\n,b.`pac_UF`\n,b.pac_cep\n,d.nivel_nome\n,a.usu_login\n,e.usu_nome\n,a.evo_data\n,CONCAT (date_format (case whe"
+"n b.pac_sys_dt_alt = '0000-00-00' then '1900-01-01' else b.pac_sys_dt_alt end, \"%Y-%m-%d\"),' ', b.pac_sys_hr_alt,':00'"
+") as dt_atlz\nfrom gss_evolucao_geral a\ninner join gsc_paciente b on a.pac_codigo = b.pac_codigo \ninner join gsc_conve"
+"nio c on c.cnv_codigo = b.cnv_codigo \ninner join gsc_nivel_atencao_360 d on d.nivel_codigo = b.pro_codigo \ninner join "
+"gsc_usuario e on e.usu_login = a.usu_login \ninner join gsc_profissao f on f.fis_codigo = e.prf_codigo\nwhere e.prf_codi"
+"go = 6\norder by pac_codigo";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.pac_codigo = 0;
							} else {
		                          
            row1.pac_codigo = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.pac_nome = null;
							} else {
	                         		
        	row1.pac_nome = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.pac_dt_nasc = null;
							} else {
										
				if(rs_tDBInput_1.getString(3) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.pac_dt_nasc = rs_tDBInput_1.getTimestamp(3);
					} else {
						row1.pac_dt_nasc = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.pac_dt_nasc =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.pac_sexo = null;
							} else {
	                         		
        	row1.pac_sexo = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.cnv_nome = null;
							} else {
	                         		
        	row1.cnv_nome = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.pac_end = null;
							} else {
	                         		
        	row1.pac_end = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.pac_num = null;
							} else {
	                         		
        	row1.pac_num = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.pac_bairro = null;
							} else {
	                         		
        	row1.pac_bairro = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.pac_cid = null;
							} else {
	                         		
        	row1.pac_cid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.pac_UF = null;
							} else {
	                         		
        	row1.pac_UF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.pac_CEP = null;
							} else {
	                         		
        	row1.pac_CEP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.nivel_nome = null;
							} else {
	                         		
        	row1.nivel_nome = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.usu_login = null;
							} else {
	                         		
        	row1.usu_login = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.usu_nome = null;
							} else {
	                         		
        	row1.usu_nome = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.evo_data = null;
							} else {
										
				if(rs_tDBInput_1.getString(15) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(15);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.evo_data = rs_tDBInput_1.getTimestamp(15);
					} else {
						row1.evo_data = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.evo_data =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.dt_atlz = null;
							} else {
										
				if(rs_tDBInput_1.getString(16) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.dt_atlz = rs_tDBInput_1.getTimestamp(16);
					} else {
						row1.dt_atlz = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.dt_atlz =  null;
				}
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out = null;


// # Output table : 'out'
out_tmp.pac_codigo = row1.pac_codigo;
out_tmp.pac_nome = row1.pac_nome;
out_tmp.pac_dt_nasc = row1.pac_dt_nasc;
out_tmp.pac_sexo = row1.pac_sexo;
out_tmp.cnv_nome = row1.cnv_nome;
out_tmp.pac_end = row1.pac_end;
out_tmp.pac_num = row1.pac_num;
out_tmp.pac_bairro = row1.pac_bairro;
out_tmp.pac_cid = row1.pac_cid;
out_tmp.pac_UF = row1.pac_UF;
out_tmp.pac_CEP = row1.pac_CEP;
out_tmp.nivel_nome = row1.nivel_nome;
out_tmp.usu_login = row1.usu_login;
out_tmp.usu_nome = row1.usu_nome;
out_tmp.evo_data = row1.evo_data;
out_tmp.dt_atlz = row1.dt_atlz;
out_tmp.fis_nome = "";
out_tmp.evo_hr_inc = "";
out_tmp.data_evolucao = "1900-01-01";
out_tmp.origem = "Consulta Medica";
out = out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out"
if(out != null) { 



	
	/**
	 * [tSQLDWHOutput_1 main ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out");
					}
					



        whetherReject_tSQLDWHOutput_1 = false;
                    pstmt_tSQLDWHOutput_1.setInt(1, out.pac_codigo);

                    if(out.pac_nome == null) {
pstmt_tSQLDWHOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(2, out.pac_nome);
}

                    if(out.pac_dt_nasc != null) {
pstmt_tSQLDWHOutput_1.setTimestamp(3, new java.sql.Timestamp(out.pac_dt_nasc.getTime()));
} else {
pstmt_tSQLDWHOutput_1.setNull(3, java.sql.Types.DATE);
}

                    if(out.pac_sexo == null) {
pstmt_tSQLDWHOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(4, out.pac_sexo);
}

                    if(out.cnv_nome == null) {
pstmt_tSQLDWHOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(5, out.cnv_nome);
}

                    if(out.pac_end == null) {
pstmt_tSQLDWHOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(6, out.pac_end);
}

                    if(out.pac_num == null) {
pstmt_tSQLDWHOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(7, out.pac_num);
}

                    if(out.pac_bairro == null) {
pstmt_tSQLDWHOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(8, out.pac_bairro);
}

                    if(out.pac_cid == null) {
pstmt_tSQLDWHOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(9, out.pac_cid);
}

                    if(out.pac_UF == null) {
pstmt_tSQLDWHOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(10, out.pac_UF);
}

                    if(out.pac_CEP == null) {
pstmt_tSQLDWHOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(11, out.pac_CEP);
}

                    if(out.nivel_nome == null) {
pstmt_tSQLDWHOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(12, out.nivel_nome);
}

                    if(out.usu_login == null) {
pstmt_tSQLDWHOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(13, out.usu_login);
}

                    if(out.usu_nome == null) {
pstmt_tSQLDWHOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(14, out.usu_nome);
}

                    if(out.evo_data != null) {
pstmt_tSQLDWHOutput_1.setTimestamp(15, new java.sql.Timestamp(out.evo_data.getTime()));
} else {
pstmt_tSQLDWHOutput_1.setNull(15, java.sql.Types.DATE);
}

                    if(out.dt_atlz != null) {
pstmt_tSQLDWHOutput_1.setTimestamp(16, new java.sql.Timestamp(out.dt_atlz.getTime()));
} else {
pstmt_tSQLDWHOutput_1.setNull(16, java.sql.Types.DATE);
}

                    if(out.fis_nome == null) {
pstmt_tSQLDWHOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(17, out.fis_nome);
}

                    if(out.evo_hr_inc == null) {
pstmt_tSQLDWHOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(18, out.evo_hr_inc);
}

                    if(out.data_evolucao == null) {
pstmt_tSQLDWHOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(19, out.data_evolucao);
}

                    if(out.origem == null) {
pstmt_tSQLDWHOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_1.setString(20, out.origem);
}


        		pstmt_tSQLDWHOutput_1.addBatch();
        		nb_line_tSQLDWHOutput_1++;
        		
    		 
    		  batchSizeCounter_tSQLDWHOutput_1++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tSQLDWHOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tSQLDWHOutput_1) throws Exception {
                try {
						
						for(int countEach_tSQLDWHOutput_1: pstmt_tSQLDWHOutput_1.executeBatch()) {
							if(countEach_tSQLDWHOutput_1 == -2 || countEach_tSQLDWHOutput_1 == -3) {
								break;
							}
							counter += countEach_tSQLDWHOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tSQLDWHOutput_1 = 0;
					for(int countEach_tSQLDWHOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tSQLDWHOutput_1 < 0 ? 0 : countEach_tSQLDWHOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tSQLDWHOutput_1) throws Exception {
                try {
                		
						for(int countEach_tSQLDWHOutput_1: pstmt_tSQLDWHOutput_1.executeBatch()) {
							if(countEach_tSQLDWHOutput_1 == -2 || countEach_tSQLDWHOutput_1 == -3) {
								break;
							}
							counter += countEach_tSQLDWHOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tSQLDWHOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tSQLDWHOutput_1 < 0 ? 0 : countEach_tSQLDWHOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tSQLDWHOutput_1 > 0) && (batchSize_tSQLDWHOutput_1 <= batchSizeCounter_tSQLDWHOutput_1)) {
    		
    		            
            	    		insertedCount_tSQLDWHOutput_1 = new LimitBytesHelper_tSQLDWHOutput_1().limitBytePart1(insertedCount_tSQLDWHOutput_1,pstmt_tSQLDWHOutput_1);
            	    	
    			
			    batchSizeCounter_tSQLDWHOutput_1 = 0;
			}
    		

    	////////////commit every////////////
    			
    		    commitCounter_tSQLDWHOutput_1++;
                if(commitEvery_tSQLDWHOutput_1 <= commitCounter_tSQLDWHOutput_1) {
                if ((batchSize_tSQLDWHOutput_1 > 0) && (batchSizeCounter_tSQLDWHOutput_1 > 0)) {
    		            
            	    		insertedCount_tSQLDWHOutput_1 = new LimitBytesHelper_tSQLDWHOutput_1().limitBytePart1(insertedCount_tSQLDWHOutput_1,pstmt_tSQLDWHOutput_1);
            	    	
            	batchSizeCounter_tSQLDWHOutput_1 = 0;
            	}
                	
                	conn_tSQLDWHOutput_1.commit();
            		
                	commitCounter_tSQLDWHOutput_1=0;
                }

 


	tos_count_tSQLDWHOutput_1++;

/**
 * [tSQLDWHOutput_1 main ] stop
 */
	
	/**
	 * [tSQLDWHOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	

 



/**
 * [tSQLDWHOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tSQLDWHOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	

 



/**
 * [tSQLDWHOutput_1 process_data_end ] stop
 */

} // End of branch "out"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tSQLDWHOutput_1 end ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	



                try {
						int countSum_tSQLDWHOutput_1 = 0;
						if (pstmt_tSQLDWHOutput_1 != null && batchSizeCounter_tSQLDWHOutput_1 > 0) {
							
							for(int countEach_tSQLDWHOutput_1: pstmt_tSQLDWHOutput_1.executeBatch()) {
								if(countEach_tSQLDWHOutput_1 == -2 || countEach_tSQLDWHOutput_1 == -3) {
									break;
								}
								countSum_tSQLDWHOutput_1 += countEach_tSQLDWHOutput_1;
							}
							
						}
            	    	
            	    		insertedCount_tSQLDWHOutput_1 += countSum_tSQLDWHOutput_1;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tSQLDWHOutput_1 = 0;
					for(int countEach_tSQLDWHOutput_1: e.getUpdateCounts()) {
						countSum_tSQLDWHOutput_1 += (countEach_tSQLDWHOutput_1 < 0 ? 0 : countEach_tSQLDWHOutput_1);
					}
					
            	    		insertedCount_tSQLDWHOutput_1 += countSum_tSQLDWHOutput_1;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_tSQLDWHOutput_1 != null) {
			
				pstmt_tSQLDWHOutput_1.close();
				resourceMap.remove("pstmt_tSQLDWHOutput_1");
			
        }
    resourceMap.put("statementClosed_tSQLDWHOutput_1", true);
            conn_tSQLDWHOutput_1.commit();
			
        conn_tSQLDWHOutput_1 .close();
        resourceMap.put("finish_tSQLDWHOutput_1", true);

	nb_line_deleted_tSQLDWHOutput_1=nb_line_deleted_tSQLDWHOutput_1+ deletedCount_tSQLDWHOutput_1;
	nb_line_update_tSQLDWHOutput_1=nb_line_update_tSQLDWHOutput_1 + updatedCount_tSQLDWHOutput_1;
	nb_line_inserted_tSQLDWHOutput_1=nb_line_inserted_tSQLDWHOutput_1 + insertedCount_tSQLDWHOutput_1;
	nb_line_rejected_tSQLDWHOutput_1=nb_line_rejected_tSQLDWHOutput_1 + rejectedCount_tSQLDWHOutput_1;
	
        globalMap.put("tSQLDWHOutput_1_NB_LINE",nb_line_tSQLDWHOutput_1);
        globalMap.put("tSQLDWHOutput_1_NB_LINE_UPDATED",nb_line_update_tSQLDWHOutput_1);
        globalMap.put("tSQLDWHOutput_1_NB_LINE_INSERTED",nb_line_inserted_tSQLDWHOutput_1);
        globalMap.put("tSQLDWHOutput_1_NB_LINE_DELETED",nb_line_deleted_tSQLDWHOutput_1);
        globalMap.put("tSQLDWHOutput_1_NB_LINE_REJECTED", nb_line_rejected_tSQLDWHOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out");
			  	}
			  	
 

ok_Hash.put("tSQLDWHOutput_1", true);
end_Hash.put("tSQLDWHOutput_1", System.currentTimeMillis());




/**
 * [tSQLDWHOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tSQLDWHOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tSQLDWHOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tSQLDWHOutput_1 = null;
                if ((pstmtToClose_tSQLDWHOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tSQLDWHOutput_1")) != null) {
                    pstmtToClose_tSQLDWHOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tSQLDWHOutput_1") == null){
            java.sql.Connection ctn_tSQLDWHOutput_1 = null;
            if((ctn_tSQLDWHOutput_1 = (java.sql.Connection)resourceMap.get("conn_tSQLDWHOutput_1")) != null){
                try {
                    ctn_tSQLDWHOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tSQLDWHOutput_1) {
                    String errorMessage_tSQLDWHOutput_1 = "failed to close the connection in tSQLDWHOutput_1 :" + sqlEx_tSQLDWHOutput_1.getMessage();
                    System.err.println(errorMessage_tSQLDWHOutput_1);
                }
            }
        }
    }
 



/**
 * [tSQLDWHOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_GSC_Carga_adso_rede_gsc = new byte[0];
    static byte[] commonByteArray_GSC_Carga_adso_rede_gsc = new byte[0];

	
			    public int pac_codigo;

				public int getPac_codigo () {
					return this.pac_codigo;
				}
				
			    public String pac_nome;

				public String getPac_nome () {
					return this.pac_nome;
				}
				
			    public java.util.Date pac_dt_nasc;

				public java.util.Date getPac_dt_nasc () {
					return this.pac_dt_nasc;
				}
				
			    public String pac_sexo;

				public String getPac_sexo () {
					return this.pac_sexo;
				}
				
			    public String cnv_nome;

				public String getCnv_nome () {
					return this.cnv_nome;
				}
				
			    public String pac_end;

				public String getPac_end () {
					return this.pac_end;
				}
				
			    public String pac_num;

				public String getPac_num () {
					return this.pac_num;
				}
				
			    public String pac_bairro;

				public String getPac_bairro () {
					return this.pac_bairro;
				}
				
			    public String pac_cid;

				public String getPac_cid () {
					return this.pac_cid;
				}
				
			    public String pac_UF;

				public String getPac_UF () {
					return this.pac_UF;
				}
				
			    public String pac_CEP;

				public String getPac_CEP () {
					return this.pac_CEP;
				}
				
			    public String nivel_nome;

				public String getNivel_nome () {
					return this.nivel_nome;
				}
				
			    public String usu_login;

				public String getUsu_login () {
					return this.usu_login;
				}
				
			    public String usu_nome;

				public String getUsu_nome () {
					return this.usu_nome;
				}
				
			    public String evo_data;

				public String getEvo_data () {
					return this.evo_data;
				}
				
			    public java.util.Date dt_atlz;

				public java.util.Date getDt_atlz () {
					return this.dt_atlz;
				}
				
			    public String fis_nome;

				public String getFis_nome () {
					return this.fis_nome;
				}
				
			    public String evo_hr_inc;

				public String getEvo_hr_inc () {
					return this.evo_hr_inc;
				}
				
			    public java.util.Date data_evolucao;

				public java.util.Date getData_evolucao () {
					return this.data_evolucao;
				}
				
			    public String origem;

				public String getOrigem () {
					return this.origem;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GSC_Carga_adso_rede_gsc.length) {
				if(length < 1024 && commonByteArray_GSC_Carga_adso_rede_gsc.length == 0) {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[1024];
				} else {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length);
			strReturn = new String(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GSC_Carga_adso_rede_gsc) {

        	try {

        		int length = 0;
		
			        this.pac_codigo = dis.readInt();
					
					this.pac_nome = readString(dis);
					
					this.pac_dt_nasc = readDate(dis);
					
					this.pac_sexo = readString(dis);
					
					this.cnv_nome = readString(dis);
					
					this.pac_end = readString(dis);
					
					this.pac_num = readString(dis);
					
					this.pac_bairro = readString(dis);
					
					this.pac_cid = readString(dis);
					
					this.pac_UF = readString(dis);
					
					this.pac_CEP = readString(dis);
					
					this.nivel_nome = readString(dis);
					
					this.usu_login = readString(dis);
					
					this.usu_nome = readString(dis);
					
					this.evo_data = readString(dis);
					
					this.dt_atlz = readDate(dis);
					
					this.fis_nome = readString(dis);
					
					this.evo_hr_inc = readString(dis);
					
					this.data_evolucao = readDate(dis);
					
					this.origem = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.pac_codigo);
					
					// String
				
						writeString(this.pac_nome,dos);
					
					// java.util.Date
				
						writeDate(this.pac_dt_nasc,dos);
					
					// String
				
						writeString(this.pac_sexo,dos);
					
					// String
				
						writeString(this.cnv_nome,dos);
					
					// String
				
						writeString(this.pac_end,dos);
					
					// String
				
						writeString(this.pac_num,dos);
					
					// String
				
						writeString(this.pac_bairro,dos);
					
					// String
				
						writeString(this.pac_cid,dos);
					
					// String
				
						writeString(this.pac_UF,dos);
					
					// String
				
						writeString(this.pac_CEP,dos);
					
					// String
				
						writeString(this.nivel_nome,dos);
					
					// String
				
						writeString(this.usu_login,dos);
					
					// String
				
						writeString(this.usu_nome,dos);
					
					// String
				
						writeString(this.evo_data,dos);
					
					// java.util.Date
				
						writeDate(this.dt_atlz,dos);
					
					// String
				
						writeString(this.fis_nome,dos);
					
					// String
				
						writeString(this.evo_hr_inc,dos);
					
					// java.util.Date
				
						writeDate(this.data_evolucao,dos);
					
					// String
				
						writeString(this.origem,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pac_codigo="+String.valueOf(pac_codigo));
		sb.append(",pac_nome="+pac_nome);
		sb.append(",pac_dt_nasc="+String.valueOf(pac_dt_nasc));
		sb.append(",pac_sexo="+pac_sexo);
		sb.append(",cnv_nome="+cnv_nome);
		sb.append(",pac_end="+pac_end);
		sb.append(",pac_num="+pac_num);
		sb.append(",pac_bairro="+pac_bairro);
		sb.append(",pac_cid="+pac_cid);
		sb.append(",pac_UF="+pac_UF);
		sb.append(",pac_CEP="+pac_CEP);
		sb.append(",nivel_nome="+nivel_nome);
		sb.append(",usu_login="+usu_login);
		sb.append(",usu_nome="+usu_nome);
		sb.append(",evo_data="+evo_data);
		sb.append(",dt_atlz="+String.valueOf(dt_atlz));
		sb.append(",fis_nome="+fis_nome);
		sb.append(",evo_hr_inc="+evo_hr_inc);
		sb.append(",data_evolucao="+String.valueOf(data_evolucao));
		sb.append(",origem="+origem);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_GSC_Carga_adso_rede_gsc = new byte[0];
    static byte[] commonByteArray_GSC_Carga_adso_rede_gsc = new byte[0];

	
			    public int pac_codigo;

				public int getPac_codigo () {
					return this.pac_codigo;
				}
				
			    public String pac_nome;

				public String getPac_nome () {
					return this.pac_nome;
				}
				
			    public java.util.Date pac_dt_nasc;

				public java.util.Date getPac_dt_nasc () {
					return this.pac_dt_nasc;
				}
				
			    public String pac_sexo;

				public String getPac_sexo () {
					return this.pac_sexo;
				}
				
			    public String cnv_nome;

				public String getCnv_nome () {
					return this.cnv_nome;
				}
				
			    public String pac_end;

				public String getPac_end () {
					return this.pac_end;
				}
				
			    public String pac_num;

				public String getPac_num () {
					return this.pac_num;
				}
				
			    public String pac_bairro;

				public String getPac_bairro () {
					return this.pac_bairro;
				}
				
			    public String pac_cid;

				public String getPac_cid () {
					return this.pac_cid;
				}
				
			    public String pac_UF;

				public String getPac_UF () {
					return this.pac_UF;
				}
				
			    public String pac_CEP;

				public String getPac_CEP () {
					return this.pac_CEP;
				}
				
			    public String nivel_nome;

				public String getNivel_nome () {
					return this.nivel_nome;
				}
				
			    public String usu_login;

				public String getUsu_login () {
					return this.usu_login;
				}
				
			    public String usu_nome;

				public String getUsu_nome () {
					return this.usu_nome;
				}
				
			    public String fis_nome;

				public String getFis_nome () {
					return this.fis_nome;
				}
				
			    public java.util.Date data_evolucao;

				public java.util.Date getData_evolucao () {
					return this.data_evolucao;
				}
				
			    public String evo_hr_inc;

				public String getEvo_hr_inc () {
					return this.evo_hr_inc;
				}
				
			    public java.util.Date dt_atlz;

				public java.util.Date getDt_atlz () {
					return this.dt_atlz;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GSC_Carga_adso_rede_gsc.length) {
				if(length < 1024 && commonByteArray_GSC_Carga_adso_rede_gsc.length == 0) {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[1024];
				} else {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length);
			strReturn = new String(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GSC_Carga_adso_rede_gsc) {

        	try {

        		int length = 0;
		
			        this.pac_codigo = dis.readInt();
					
					this.pac_nome = readString(dis);
					
					this.pac_dt_nasc = readDate(dis);
					
					this.pac_sexo = readString(dis);
					
					this.cnv_nome = readString(dis);
					
					this.pac_end = readString(dis);
					
					this.pac_num = readString(dis);
					
					this.pac_bairro = readString(dis);
					
					this.pac_cid = readString(dis);
					
					this.pac_UF = readString(dis);
					
					this.pac_CEP = readString(dis);
					
					this.nivel_nome = readString(dis);
					
					this.usu_login = readString(dis);
					
					this.usu_nome = readString(dis);
					
					this.fis_nome = readString(dis);
					
					this.data_evolucao = readDate(dis);
					
					this.evo_hr_inc = readString(dis);
					
					this.dt_atlz = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.pac_codigo);
					
					// String
				
						writeString(this.pac_nome,dos);
					
					// java.util.Date
				
						writeDate(this.pac_dt_nasc,dos);
					
					// String
				
						writeString(this.pac_sexo,dos);
					
					// String
				
						writeString(this.cnv_nome,dos);
					
					// String
				
						writeString(this.pac_end,dos);
					
					// String
				
						writeString(this.pac_num,dos);
					
					// String
				
						writeString(this.pac_bairro,dos);
					
					// String
				
						writeString(this.pac_cid,dos);
					
					// String
				
						writeString(this.pac_UF,dos);
					
					// String
				
						writeString(this.pac_CEP,dos);
					
					// String
				
						writeString(this.nivel_nome,dos);
					
					// String
				
						writeString(this.usu_login,dos);
					
					// String
				
						writeString(this.usu_nome,dos);
					
					// String
				
						writeString(this.fis_nome,dos);
					
					// java.util.Date
				
						writeDate(this.data_evolucao,dos);
					
					// String
				
						writeString(this.evo_hr_inc,dos);
					
					// java.util.Date
				
						writeDate(this.dt_atlz,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pac_codigo="+String.valueOf(pac_codigo));
		sb.append(",pac_nome="+pac_nome);
		sb.append(",pac_dt_nasc="+String.valueOf(pac_dt_nasc));
		sb.append(",pac_sexo="+pac_sexo);
		sb.append(",cnv_nome="+cnv_nome);
		sb.append(",pac_end="+pac_end);
		sb.append(",pac_num="+pac_num);
		sb.append(",pac_bairro="+pac_bairro);
		sb.append(",pac_cid="+pac_cid);
		sb.append(",pac_UF="+pac_UF);
		sb.append(",pac_CEP="+pac_CEP);
		sb.append(",nivel_nome="+nivel_nome);
		sb.append(",usu_login="+usu_login);
		sb.append(",usu_nome="+usu_nome);
		sb.append(",fis_nome="+fis_nome);
		sb.append(",data_evolucao="+String.valueOf(data_evolucao));
		sb.append(",evo_hr_inc="+evo_hr_inc);
		sb.append(",dt_atlz="+String.valueOf(dt_atlz));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tSQLDWHOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLDWHOutput_2", false);
		start_Hash.put("tSQLDWHOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tSQLDWHOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tSQLDWHOutput_2 = 0;
		



int nb_line_tSQLDWHOutput_2 = 0;
int nb_line_update_tSQLDWHOutput_2 = 0;
int nb_line_inserted_tSQLDWHOutput_2 = 0;
int nb_line_deleted_tSQLDWHOutput_2 = 0;
int nb_line_rejected_tSQLDWHOutput_2 = 0;

int deletedCount_tSQLDWHOutput_2=0;
int updatedCount_tSQLDWHOutput_2=0;
int insertedCount_tSQLDWHOutput_2=0;
int rejectedCount_tSQLDWHOutput_2=0;
String dbschema_tSQLDWHOutput_2 = null;
String tableName_tSQLDWHOutput_2 = null;
boolean whetherReject_tSQLDWHOutput_2 = false;

java.util.Calendar calendar_tSQLDWHOutput_2 = java.util.Calendar.getInstance();
long year1_tSQLDWHOutput_2 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tSQLDWHOutput_2 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tSQLDWHOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tSQLDWHOutput_2;

java.util.Calendar calendar_datetimeoffset_tSQLDWHOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


java.sql.Connection conn_tSQLDWHOutput_2 = null;
String dbUser_tSQLDWHOutput_2 = null;
    dbschema_tSQLDWHOutput_2 = "telemetria";
    String driverClass_tSQLDWHOutput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
	
    java.lang.Class.forName(driverClass_tSQLDWHOutput_2);
    String port_tSQLDWHOutput_2 = "1433";
    String dbname_tSQLDWHOutput_2 = "gsc-db" ;
    String url_tSQLDWHOutput_2 = "jdbc:sqlserver://" + "gsc-db-server.database.windows.net" ; 
    if (!"".equals(port_tSQLDWHOutput_2)) {
    	url_tSQLDWHOutput_2 += ":" + "1433";
    }
    if (!"".equals(dbname_tSQLDWHOutput_2)) {		    
		    	url_tSQLDWHOutput_2 += ";databaseName=" + "gsc-db"; 
	
    }
    url_tSQLDWHOutput_2 += ";applicationName=Talend;" + "";
    dbUser_tSQLDWHOutput_2 = "gscadmin";

 
	final String decryptedPassword_tSQLDWHOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:B7SvAOfS3/iEBAg7FEvfAw9DGCOwBgEDF+rOjiCFGrOo1CWQv0Uw");

    String dbPwd_tSQLDWHOutput_2 = decryptedPassword_tSQLDWHOutput_2;	
    conn_tSQLDWHOutput_2 = java.sql.DriverManager.getConnection(url_tSQLDWHOutput_2,dbUser_tSQLDWHOutput_2,dbPwd_tSQLDWHOutput_2);
	
   int batchSize_tSQLDWHOutput_2 = 10000;
   int batchSizeCounter_tSQLDWHOutput_2=0;

if(dbschema_tSQLDWHOutput_2 == null || dbschema_tSQLDWHOutput_2.trim().length() == 0) {
    tableName_tSQLDWHOutput_2 = "tb_adso_rede_gsc";
} else {
    tableName_tSQLDWHOutput_2 = dbschema_tSQLDWHOutput_2 + "].[" + "tb_adso_rede_gsc";
}
	int count_tSQLDWHOutput_2=0;

		resourceMap.put("conn_tSQLDWHOutput_2", conn_tSQLDWHOutput_2);
	
        conn_tSQLDWHOutput_2.setAutoCommit(false);
        int commitEvery_tSQLDWHOutput_2 = 10000;
        int commitCounter_tSQLDWHOutput_2 = 0;

        String insert_tSQLDWHOutput_2 = "INSERT INTO [" + tableName_tSQLDWHOutput_2 + "] ([pac_codigo],[pac_nome],[pac_dt_nasc],[pac_sexo],[cnv_nome],[pac_end],[pac_num],[pac_bairro],[pac_cid],[pac_UF],[pac_CEP],[nivel_nome],[usu_login],[usu_nome],[evo_data],[dt_atlz],[fis_nome],[evo_hr_inc],[data_evolucao],[origem]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tSQLDWHOutput_2 = conn_tSQLDWHOutput_2.prepareStatement(insert_tSQLDWHOutput_2);
        resourceMap.put("pstmt_tSQLDWHOutput_2", pstmt_tSQLDWHOutput_2);


 



/**
 * [tSQLDWHOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:rfAwCwfg9COvrMVQ2y2DV0l05QIiS0kGRgVVuz5vt2vxoY77bfw=");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:mysql://" + "10.0.2.4" + ":" + "3306" + "/" + "gsc" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select\nb.pac_codigo\n,b.pac_nome\n,b.pac_dt_nasc\n,b.pac_sexo\n,c.cnv_nome\n,b.pac_end\n,b.pac_num\n,b.pac_bairro\n,b."
+"pac_cid\n,b.`pac_UF`\n,b.pac_cep\n,d.nivel_nome\n,a.usu_login\n,e.usu_nome\n,f.fis_nome\n,a.data_evolucao\n,a.evo_hr_inc"
+"\n,CONCAT (date_format (case when b.pac_sys_dt_alt = '0000-00-00' then '1900-01-01' else b.pac_sys_dt_alt end, \"%Y-%m-%"
+"d\"),' ', b.pac_sys_hr_alt,':00') as dt_atlz\nfrom gsc_evolucao_tele_medicina a\ninner join gsc_paciente b on a.pac_codi"
+"go = b.pac_codigo\ninner join gsc_convenio c on c.cnv_codigo = b.cnv_codigo\ninner join gsc_nivel_atencao_360 d on d.niv"
+"el_codigo = b.pro_codigo\ninner join gsc_usuario e on a.usu_login = e.usu_login\ninner join gsc_profissao f on f.fis_cod"
+"igo = e.prf_codigo\nwhere e.prf_codigo = 6";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.pac_codigo = 0;
							} else {
		                          
            row2.pac_codigo = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.pac_nome = null;
							} else {
	                         		
        	row2.pac_nome = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.pac_dt_nasc = null;
							} else {
										
				if(rs_tDBInput_2.getString(3) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.pac_dt_nasc = rs_tDBInput_2.getTimestamp(3);
					} else {
						row2.pac_dt_nasc = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.pac_dt_nasc =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.pac_sexo = null;
							} else {
	                         		
        	row2.pac_sexo = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.cnv_nome = null;
							} else {
	                         		
        	row2.cnv_nome = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.pac_end = null;
							} else {
	                         		
        	row2.pac_end = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.pac_num = null;
							} else {
	                         		
        	row2.pac_num = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.pac_bairro = null;
							} else {
	                         		
        	row2.pac_bairro = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.pac_cid = null;
							} else {
	                         		
        	row2.pac_cid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.pac_UF = null;
							} else {
	                         		
        	row2.pac_UF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.pac_CEP = null;
							} else {
	                         		
        	row2.pac_CEP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.nivel_nome = null;
							} else {
	                         		
        	row2.nivel_nome = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.usu_login = null;
							} else {
	                         		
        	row2.usu_login = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2.usu_nome = null;
							} else {
	                         		
        	row2.usu_nome = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.fis_nome = null;
							} else {
	                         		
        	row2.fis_nome = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2.data_evolucao = null;
							} else {
										
				if(rs_tDBInput_2.getString(16) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.data_evolucao = rs_tDBInput_2.getTimestamp(16);
					} else {
						row2.data_evolucao = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.data_evolucao =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.evo_hr_inc = null;
							} else {
	                         		
        	row2.evo_hr_inc = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row2.dt_atlz = null;
							} else {
										
				if(rs_tDBInput_2.getString(18) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(18);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.dt_atlz = rs_tDBInput_2.getTimestamp(18);
					} else {
						row2.dt_atlz = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.dt_atlz =  null;
				}
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.pac_codigo = row2.pac_codigo;
out2_tmp.pac_nome = row2.pac_nome;
out2_tmp.pac_dt_nasc = row2.pac_dt_nasc;
out2_tmp.pac_sexo = row2.pac_sexo;
out2_tmp.cnv_nome = row2.cnv_nome;
out2_tmp.pac_end = row2.pac_end;
out2_tmp.pac_num = row2.pac_num;
out2_tmp.pac_bairro = row2.pac_bairro;
out2_tmp.pac_cid = row2.pac_cid;
out2_tmp.pac_UF = row2.pac_UF;
out2_tmp.pac_CEP = row2.pac_CEP;
out2_tmp.nivel_nome = row2.nivel_nome;
out2_tmp.usu_login = row2.usu_login;
out2_tmp.usu_nome = row2.usu_nome;
out2_tmp.evo_data = "";
out2_tmp.dt_atlz = row2.dt_atlz;
out2_tmp.fis_nome = row2.fis_nome;
out2_tmp.evo_hr_inc = row2.evo_hr_inc;
out2_tmp.data_evolucao = row2.data_evolucao;
out2_tmp.origem = "Tele Consulta";
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tSQLDWHOutput_2 main ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					



        whetherReject_tSQLDWHOutput_2 = false;
                    pstmt_tSQLDWHOutput_2.setInt(1, out2.pac_codigo);

                    if(out2.pac_nome == null) {
pstmt_tSQLDWHOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(2, out2.pac_nome);
}

                    if(out2.pac_dt_nasc != null) {
pstmt_tSQLDWHOutput_2.setTimestamp(3, new java.sql.Timestamp(out2.pac_dt_nasc.getTime()));
} else {
pstmt_tSQLDWHOutput_2.setNull(3, java.sql.Types.DATE);
}

                    if(out2.pac_sexo == null) {
pstmt_tSQLDWHOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(4, out2.pac_sexo);
}

                    if(out2.cnv_nome == null) {
pstmt_tSQLDWHOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(5, out2.cnv_nome);
}

                    if(out2.pac_end == null) {
pstmt_tSQLDWHOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(6, out2.pac_end);
}

                    if(out2.pac_num == null) {
pstmt_tSQLDWHOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(7, out2.pac_num);
}

                    if(out2.pac_bairro == null) {
pstmt_tSQLDWHOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(8, out2.pac_bairro);
}

                    if(out2.pac_cid == null) {
pstmt_tSQLDWHOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(9, out2.pac_cid);
}

                    if(out2.pac_UF == null) {
pstmt_tSQLDWHOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(10, out2.pac_UF);
}

                    if(out2.pac_CEP == null) {
pstmt_tSQLDWHOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(11, out2.pac_CEP);
}

                    if(out2.nivel_nome == null) {
pstmt_tSQLDWHOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(12, out2.nivel_nome);
}

                    if(out2.usu_login == null) {
pstmt_tSQLDWHOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(13, out2.usu_login);
}

                    if(out2.usu_nome == null) {
pstmt_tSQLDWHOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(14, out2.usu_nome);
}

                    if(out2.evo_data == null) {
pstmt_tSQLDWHOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(15, out2.evo_data);
}

                    if(out2.dt_atlz != null) {
pstmt_tSQLDWHOutput_2.setTimestamp(16, new java.sql.Timestamp(out2.dt_atlz.getTime()));
} else {
pstmt_tSQLDWHOutput_2.setNull(16, java.sql.Types.DATE);
}

                    if(out2.fis_nome == null) {
pstmt_tSQLDWHOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(17, out2.fis_nome);
}

                    if(out2.evo_hr_inc == null) {
pstmt_tSQLDWHOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(18, out2.evo_hr_inc);
}

                    if(out2.data_evolucao != null) {
pstmt_tSQLDWHOutput_2.setTimestamp(19, new java.sql.Timestamp(out2.data_evolucao.getTime()));
} else {
pstmt_tSQLDWHOutput_2.setNull(19, java.sql.Types.DATE);
}

                    if(out2.origem == null) {
pstmt_tSQLDWHOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_2.setString(20, out2.origem);
}


        		pstmt_tSQLDWHOutput_2.addBatch();
        		nb_line_tSQLDWHOutput_2++;
        		
    		 
    		  batchSizeCounter_tSQLDWHOutput_2++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tSQLDWHOutput_2{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tSQLDWHOutput_2) throws Exception {
                try {
						
						for(int countEach_tSQLDWHOutput_2: pstmt_tSQLDWHOutput_2.executeBatch()) {
							if(countEach_tSQLDWHOutput_2 == -2 || countEach_tSQLDWHOutput_2 == -3) {
								break;
							}
							counter += countEach_tSQLDWHOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tSQLDWHOutput_2 = 0;
					for(int countEach_tSQLDWHOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tSQLDWHOutput_2 < 0 ? 0 : countEach_tSQLDWHOutput_2);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tSQLDWHOutput_2) throws Exception {
                try {
                		
						for(int countEach_tSQLDWHOutput_2: pstmt_tSQLDWHOutput_2.executeBatch()) {
							if(countEach_tSQLDWHOutput_2 == -2 || countEach_tSQLDWHOutput_2 == -3) {
								break;
							}
							counter += countEach_tSQLDWHOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tSQLDWHOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tSQLDWHOutput_2 < 0 ? 0 : countEach_tSQLDWHOutput_2);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tSQLDWHOutput_2 > 0) && (batchSize_tSQLDWHOutput_2 <= batchSizeCounter_tSQLDWHOutput_2)) {
    		
    		            
            	    		insertedCount_tSQLDWHOutput_2 = new LimitBytesHelper_tSQLDWHOutput_2().limitBytePart1(insertedCount_tSQLDWHOutput_2,pstmt_tSQLDWHOutput_2);
            	    	
    			
			    batchSizeCounter_tSQLDWHOutput_2 = 0;
			}
    		

    	////////////commit every////////////
    			
    		    commitCounter_tSQLDWHOutput_2++;
                if(commitEvery_tSQLDWHOutput_2 <= commitCounter_tSQLDWHOutput_2) {
                if ((batchSize_tSQLDWHOutput_2 > 0) && (batchSizeCounter_tSQLDWHOutput_2 > 0)) {
    		            
            	    		insertedCount_tSQLDWHOutput_2 = new LimitBytesHelper_tSQLDWHOutput_2().limitBytePart1(insertedCount_tSQLDWHOutput_2,pstmt_tSQLDWHOutput_2);
            	    	
            	batchSizeCounter_tSQLDWHOutput_2 = 0;
            	}
                	
                	conn_tSQLDWHOutput_2.commit();
            		
                	commitCounter_tSQLDWHOutput_2=0;
                }

 


	tos_count_tSQLDWHOutput_2++;

/**
 * [tSQLDWHOutput_2 main ] stop
 */
	
	/**
	 * [tSQLDWHOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_2";

	

 



/**
 * [tSQLDWHOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tSQLDWHOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_2";

	

 



/**
 * [tSQLDWHOutput_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tSQLDWHOutput_2 end ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_2";

	



                try {
						int countSum_tSQLDWHOutput_2 = 0;
						if (pstmt_tSQLDWHOutput_2 != null && batchSizeCounter_tSQLDWHOutput_2 > 0) {
							
							for(int countEach_tSQLDWHOutput_2: pstmt_tSQLDWHOutput_2.executeBatch()) {
								if(countEach_tSQLDWHOutput_2 == -2 || countEach_tSQLDWHOutput_2 == -3) {
									break;
								}
								countSum_tSQLDWHOutput_2 += countEach_tSQLDWHOutput_2;
							}
							
						}
            	    	
            	    		insertedCount_tSQLDWHOutput_2 += countSum_tSQLDWHOutput_2;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tSQLDWHOutput_2 = 0;
					for(int countEach_tSQLDWHOutput_2: e.getUpdateCounts()) {
						countSum_tSQLDWHOutput_2 += (countEach_tSQLDWHOutput_2 < 0 ? 0 : countEach_tSQLDWHOutput_2);
					}
					
            	    		insertedCount_tSQLDWHOutput_2 += countSum_tSQLDWHOutput_2;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_tSQLDWHOutput_2 != null) {
			
				pstmt_tSQLDWHOutput_2.close();
				resourceMap.remove("pstmt_tSQLDWHOutput_2");
			
        }
    resourceMap.put("statementClosed_tSQLDWHOutput_2", true);
            conn_tSQLDWHOutput_2.commit();
			
        conn_tSQLDWHOutput_2 .close();
        resourceMap.put("finish_tSQLDWHOutput_2", true);

	nb_line_deleted_tSQLDWHOutput_2=nb_line_deleted_tSQLDWHOutput_2+ deletedCount_tSQLDWHOutput_2;
	nb_line_update_tSQLDWHOutput_2=nb_line_update_tSQLDWHOutput_2 + updatedCount_tSQLDWHOutput_2;
	nb_line_inserted_tSQLDWHOutput_2=nb_line_inserted_tSQLDWHOutput_2 + insertedCount_tSQLDWHOutput_2;
	nb_line_rejected_tSQLDWHOutput_2=nb_line_rejected_tSQLDWHOutput_2 + rejectedCount_tSQLDWHOutput_2;
	
        globalMap.put("tSQLDWHOutput_2_NB_LINE",nb_line_tSQLDWHOutput_2);
        globalMap.put("tSQLDWHOutput_2_NB_LINE_UPDATED",nb_line_update_tSQLDWHOutput_2);
        globalMap.put("tSQLDWHOutput_2_NB_LINE_INSERTED",nb_line_inserted_tSQLDWHOutput_2);
        globalMap.put("tSQLDWHOutput_2_NB_LINE_DELETED",nb_line_deleted_tSQLDWHOutput_2);
        globalMap.put("tSQLDWHOutput_2_NB_LINE_REJECTED", nb_line_rejected_tSQLDWHOutput_2);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tSQLDWHOutput_2", true);
end_Hash.put("tSQLDWHOutput_2", System.currentTimeMillis());




/**
 * [tSQLDWHOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tSQLDWHOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tSQLDWHOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tSQLDWHOutput_2 = null;
                if ((pstmtToClose_tSQLDWHOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tSQLDWHOutput_2")) != null) {
                    pstmtToClose_tSQLDWHOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tSQLDWHOutput_2") == null){
            java.sql.Connection ctn_tSQLDWHOutput_2 = null;
            if((ctn_tSQLDWHOutput_2 = (java.sql.Connection)resourceMap.get("conn_tSQLDWHOutput_2")) != null){
                try {
                    ctn_tSQLDWHOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tSQLDWHOutput_2) {
                    String errorMessage_tSQLDWHOutput_2 = "failed to close the connection in tSQLDWHOutput_2 :" + sqlEx_tSQLDWHOutput_2.getMessage();
                    System.err.println(errorMessage_tSQLDWHOutput_2);
                }
            }
        }
    }
 



/**
 * [tSQLDWHOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_GSC_Carga_adso_rede_gsc = new byte[0];
    static byte[] commonByteArray_GSC_Carga_adso_rede_gsc = new byte[0];

	
			    public String usu_login;

				public String getUsu_login () {
					return this.usu_login;
				}
				
			    public String usu_nome;

				public String getUsu_nome () {
					return this.usu_nome;
				}
				
			    public String fis_nome;

				public String getFis_nome () {
					return this.fis_nome;
				}
				
			    public String usu_cnv_grupo_ms;

				public String getUsu_cnv_grupo_ms () {
					return this.usu_cnv_grupo_ms;
				}
				
			    public Integer prf_codigo;

				public Integer getPrf_codigo () {
					return this.prf_codigo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GSC_Carga_adso_rede_gsc.length) {
				if(length < 1024 && commonByteArray_GSC_Carga_adso_rede_gsc.length == 0) {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[1024];
				} else {
   					commonByteArray_GSC_Carga_adso_rede_gsc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length);
			strReturn = new String(commonByteArray_GSC_Carga_adso_rede_gsc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GSC_Carga_adso_rede_gsc) {

        	try {

        		int length = 0;
		
					this.usu_login = readString(dis);
					
					this.usu_nome = readString(dis);
					
					this.fis_nome = readString(dis);
					
					this.usu_cnv_grupo_ms = readString(dis);
					
						this.prf_codigo = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.usu_login,dos);
					
					// String
				
						writeString(this.usu_nome,dos);
					
					// String
				
						writeString(this.fis_nome,dos);
					
					// String
				
						writeString(this.usu_cnv_grupo_ms,dos);
					
					// Integer
				
						writeInteger(this.prf_codigo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("usu_login="+usu_login);
		sb.append(",usu_nome="+usu_nome);
		sb.append(",fis_nome="+fis_nome);
		sb.append(",usu_cnv_grupo_ms="+usu_cnv_grupo_ms);
		sb.append(",prf_codigo="+String.valueOf(prf_codigo));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tSQLDWHOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLDWHOutput_3", false);
		start_Hash.put("tSQLDWHOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tSQLDWHOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tSQLDWHOutput_3 = 0;
		



int nb_line_tSQLDWHOutput_3 = 0;
int nb_line_update_tSQLDWHOutput_3 = 0;
int nb_line_inserted_tSQLDWHOutput_3 = 0;
int nb_line_deleted_tSQLDWHOutput_3 = 0;
int nb_line_rejected_tSQLDWHOutput_3 = 0;

int deletedCount_tSQLDWHOutput_3=0;
int updatedCount_tSQLDWHOutput_3=0;
int insertedCount_tSQLDWHOutput_3=0;
int rejectedCount_tSQLDWHOutput_3=0;
String dbschema_tSQLDWHOutput_3 = null;
String tableName_tSQLDWHOutput_3 = null;
boolean whetherReject_tSQLDWHOutput_3 = false;

java.util.Calendar calendar_tSQLDWHOutput_3 = java.util.Calendar.getInstance();
long year1_tSQLDWHOutput_3 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tSQLDWHOutput_3 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tSQLDWHOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tSQLDWHOutput_3;

java.util.Calendar calendar_datetimeoffset_tSQLDWHOutput_3 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


java.sql.Connection conn_tSQLDWHOutput_3 = null;
String dbUser_tSQLDWHOutput_3 = null;
    dbschema_tSQLDWHOutput_3 = "telemetria";
    String driverClass_tSQLDWHOutput_3 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
	
    java.lang.Class.forName(driverClass_tSQLDWHOutput_3);
    String port_tSQLDWHOutput_3 = "1433";
    String dbname_tSQLDWHOutput_3 = "gsc-db" ;
    String url_tSQLDWHOutput_3 = "jdbc:sqlserver://" + "gsc-db-server.database.windows.net" ; 
    if (!"".equals(port_tSQLDWHOutput_3)) {
    	url_tSQLDWHOutput_3 += ":" + "1433";
    }
    if (!"".equals(dbname_tSQLDWHOutput_3)) {		    
		    	url_tSQLDWHOutput_3 += ";databaseName=" + "gsc-db"; 
	
    }
    url_tSQLDWHOutput_3 += ";applicationName=Talend;" + "";
    dbUser_tSQLDWHOutput_3 = "gscadmin";

 
	final String decryptedPassword_tSQLDWHOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:wtLNYkuByox9QgmBY6EEyqYrvXnJDIfFRpSga/Z9Oz7Qhjz/+3WF");

    String dbPwd_tSQLDWHOutput_3 = decryptedPassword_tSQLDWHOutput_3;	
    conn_tSQLDWHOutput_3 = java.sql.DriverManager.getConnection(url_tSQLDWHOutput_3,dbUser_tSQLDWHOutput_3,dbPwd_tSQLDWHOutput_3);
	
   int batchSize_tSQLDWHOutput_3 = 10000;
   int batchSizeCounter_tSQLDWHOutput_3=0;

if(dbschema_tSQLDWHOutput_3 == null || dbschema_tSQLDWHOutput_3.trim().length() == 0) {
    tableName_tSQLDWHOutput_3 = "tb_medicos_rede_gsc";
} else {
    tableName_tSQLDWHOutput_3 = dbschema_tSQLDWHOutput_3 + "].[" + "tb_medicos_rede_gsc";
}
	int count_tSQLDWHOutput_3=0;

            int rsTruncCountNumber_tSQLDWHOutput_3 = 0;
            try(java.sql.Statement stmtTruncCount_tSQLDWHOutput_3 = conn_tSQLDWHOutput_3.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tSQLDWHOutput_3 = stmtTruncCount_tSQLDWHOutput_3.executeQuery("SELECT COUNT(1) FROM [" + tableName_tSQLDWHOutput_3 + "]")) {
                    if(rsTruncCount_tSQLDWHOutput_3.next()) {
                        rsTruncCountNumber_tSQLDWHOutput_3 = rsTruncCount_tSQLDWHOutput_3.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tSQLDWHOutput_3 = conn_tSQLDWHOutput_3.createStatement()) {
                stmtTrunc_tSQLDWHOutput_3.executeUpdate("TRUNCATE TABLE [" + tableName_tSQLDWHOutput_3 + "]");
                deletedCount_tSQLDWHOutput_3 += rsTruncCountNumber_tSQLDWHOutput_3;
            }
		resourceMap.put("conn_tSQLDWHOutput_3", conn_tSQLDWHOutput_3);
	
        conn_tSQLDWHOutput_3.setAutoCommit(false);
        int commitEvery_tSQLDWHOutput_3 = 10000;
        int commitCounter_tSQLDWHOutput_3 = 0;

        String insert_tSQLDWHOutput_3 = "INSERT INTO [" + tableName_tSQLDWHOutput_3 + "] ([usu_login],[usu_nome],[fis_nome],[usu_cnv_grupo_ms],[prf_codigo]) VALUES (?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tSQLDWHOutput_3 = conn_tSQLDWHOutput_3.prepareStatement(insert_tSQLDWHOutput_3);
        resourceMap.put("pstmt_tSQLDWHOutput_3", pstmt_tSQLDWHOutput_3);


 



/**
 * [tSQLDWHOutput_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Iw5pTnuvlA0gx4cqq9fUapaOyIFB1gaKcsf+6pkCUH+hpn4wpZE=");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:mysql://" + "10.0.2.4" + ":" + "3306" + "/" + "gsc" + "?" + "noDatetimeStringSync=true";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select \na.usu_login,\na.usu_nome,\nb.fis_nome,\na.usu_cnv_grupo_ms,\na.prf_codigo\nfrom gsc_usuario a \ninner join gsc"
+"_profissao b on b.fis_codigo = a.prf_codigo ";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.usu_login = null;
							} else {
	                         		
        	row3.usu_login = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.usu_nome = null;
							} else {
	                         		
        	row3.usu_nome = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.fis_nome = null;
							} else {
	                         		
        	row3.fis_nome = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.usu_cnv_grupo_ms = null;
							} else {
	                         		
        	row3.usu_cnv_grupo_ms = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.prf_codigo = null;
							} else {
		                          
            row3.prf_codigo = rs_tDBInput_3.getInt(5);
            if(rs_tDBInput_3.wasNull()){
                    row3.prf_codigo = null;
            }
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tSQLDWHOutput_3 main ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					



        whetherReject_tSQLDWHOutput_3 = false;
                    if(row3.usu_login == null) {
pstmt_tSQLDWHOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_3.setString(1, row3.usu_login);
}

                    if(row3.usu_nome == null) {
pstmt_tSQLDWHOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_3.setString(2, row3.usu_nome);
}

                    if(row3.fis_nome == null) {
pstmt_tSQLDWHOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_3.setString(3, row3.fis_nome);
}

                    if(row3.usu_cnv_grupo_ms == null) {
pstmt_tSQLDWHOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tSQLDWHOutput_3.setString(4, row3.usu_cnv_grupo_ms);
}

                    if(row3.prf_codigo == null) {
pstmt_tSQLDWHOutput_3.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tSQLDWHOutput_3.setInt(5, row3.prf_codigo);
}


        		pstmt_tSQLDWHOutput_3.addBatch();
        		nb_line_tSQLDWHOutput_3++;
        		
    		 
    		  batchSizeCounter_tSQLDWHOutput_3++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tSQLDWHOutput_3{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tSQLDWHOutput_3) throws Exception {
                try {
						
						for(int countEach_tSQLDWHOutput_3: pstmt_tSQLDWHOutput_3.executeBatch()) {
							if(countEach_tSQLDWHOutput_3 == -2 || countEach_tSQLDWHOutput_3 == -3) {
								break;
							}
							counter += countEach_tSQLDWHOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tSQLDWHOutput_3 = 0;
					for(int countEach_tSQLDWHOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tSQLDWHOutput_3 < 0 ? 0 : countEach_tSQLDWHOutput_3);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tSQLDWHOutput_3) throws Exception {
                try {
                		
						for(int countEach_tSQLDWHOutput_3: pstmt_tSQLDWHOutput_3.executeBatch()) {
							if(countEach_tSQLDWHOutput_3 == -2 || countEach_tSQLDWHOutput_3 == -3) {
								break;
							}
							counter += countEach_tSQLDWHOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tSQLDWHOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tSQLDWHOutput_3 < 0 ? 0 : countEach_tSQLDWHOutput_3);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tSQLDWHOutput_3 > 0) && (batchSize_tSQLDWHOutput_3 <= batchSizeCounter_tSQLDWHOutput_3)) {
    		
    		            
            	    		insertedCount_tSQLDWHOutput_3 = new LimitBytesHelper_tSQLDWHOutput_3().limitBytePart1(insertedCount_tSQLDWHOutput_3,pstmt_tSQLDWHOutput_3);
            	    	
    			
			    batchSizeCounter_tSQLDWHOutput_3 = 0;
			}
    		

    	////////////commit every////////////
    			
    		    commitCounter_tSQLDWHOutput_3++;
                if(commitEvery_tSQLDWHOutput_3 <= commitCounter_tSQLDWHOutput_3) {
                if ((batchSize_tSQLDWHOutput_3 > 0) && (batchSizeCounter_tSQLDWHOutput_3 > 0)) {
    		            
            	    		insertedCount_tSQLDWHOutput_3 = new LimitBytesHelper_tSQLDWHOutput_3().limitBytePart1(insertedCount_tSQLDWHOutput_3,pstmt_tSQLDWHOutput_3);
            	    	
            	batchSizeCounter_tSQLDWHOutput_3 = 0;
            	}
                	
                	conn_tSQLDWHOutput_3.commit();
            		
                	commitCounter_tSQLDWHOutput_3=0;
                }

 


	tos_count_tSQLDWHOutput_3++;

/**
 * [tSQLDWHOutput_3 main ] stop
 */
	
	/**
	 * [tSQLDWHOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_3";

	

 



/**
 * [tSQLDWHOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tSQLDWHOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_3";

	

 



/**
 * [tSQLDWHOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tSQLDWHOutput_3 end ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_3";

	



                try {
						int countSum_tSQLDWHOutput_3 = 0;
						if (pstmt_tSQLDWHOutput_3 != null && batchSizeCounter_tSQLDWHOutput_3 > 0) {
							
							for(int countEach_tSQLDWHOutput_3: pstmt_tSQLDWHOutput_3.executeBatch()) {
								if(countEach_tSQLDWHOutput_3 == -2 || countEach_tSQLDWHOutput_3 == -3) {
									break;
								}
								countSum_tSQLDWHOutput_3 += countEach_tSQLDWHOutput_3;
							}
							
						}
            	    	
            	    		insertedCount_tSQLDWHOutput_3 += countSum_tSQLDWHOutput_3;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tSQLDWHOutput_3 = 0;
					for(int countEach_tSQLDWHOutput_3: e.getUpdateCounts()) {
						countSum_tSQLDWHOutput_3 += (countEach_tSQLDWHOutput_3 < 0 ? 0 : countEach_tSQLDWHOutput_3);
					}
					
            	    		insertedCount_tSQLDWHOutput_3 += countSum_tSQLDWHOutput_3;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_tSQLDWHOutput_3 != null) {
			
				pstmt_tSQLDWHOutput_3.close();
				resourceMap.remove("pstmt_tSQLDWHOutput_3");
			
        }
    resourceMap.put("statementClosed_tSQLDWHOutput_3", true);
            conn_tSQLDWHOutput_3.commit();
			
        conn_tSQLDWHOutput_3 .close();
        resourceMap.put("finish_tSQLDWHOutput_3", true);

	nb_line_deleted_tSQLDWHOutput_3=nb_line_deleted_tSQLDWHOutput_3+ deletedCount_tSQLDWHOutput_3;
	nb_line_update_tSQLDWHOutput_3=nb_line_update_tSQLDWHOutput_3 + updatedCount_tSQLDWHOutput_3;
	nb_line_inserted_tSQLDWHOutput_3=nb_line_inserted_tSQLDWHOutput_3 + insertedCount_tSQLDWHOutput_3;
	nb_line_rejected_tSQLDWHOutput_3=nb_line_rejected_tSQLDWHOutput_3 + rejectedCount_tSQLDWHOutput_3;
	
        globalMap.put("tSQLDWHOutput_3_NB_LINE",nb_line_tSQLDWHOutput_3);
        globalMap.put("tSQLDWHOutput_3_NB_LINE_UPDATED",nb_line_update_tSQLDWHOutput_3);
        globalMap.put("tSQLDWHOutput_3_NB_LINE_INSERTED",nb_line_inserted_tSQLDWHOutput_3);
        globalMap.put("tSQLDWHOutput_3_NB_LINE_DELETED",nb_line_deleted_tSQLDWHOutput_3);
        globalMap.put("tSQLDWHOutput_3_NB_LINE_REJECTED", nb_line_rejected_tSQLDWHOutput_3);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tSQLDWHOutput_3", true);
end_Hash.put("tSQLDWHOutput_3", System.currentTimeMillis());




/**
 * [tSQLDWHOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tSQLDWHOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tSQLDWHOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tSQLDWHOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tSQLDWHOutput_3 = null;
                if ((pstmtToClose_tSQLDWHOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tSQLDWHOutput_3")) != null) {
                    pstmtToClose_tSQLDWHOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tSQLDWHOutput_3") == null){
            java.sql.Connection ctn_tSQLDWHOutput_3 = null;
            if((ctn_tSQLDWHOutput_3 = (java.sql.Connection)resourceMap.get("conn_tSQLDWHOutput_3")) != null){
                try {
                    ctn_tSQLDWHOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tSQLDWHOutput_3) {
                    String errorMessage_tSQLDWHOutput_3 = "failed to close the connection in tSQLDWHOutput_3 :" + sqlEx_tSQLDWHOutput_3.getMessage();
                    System.err.println(errorMessage_tSQLDWHOutput_3);
                }
            }
        }
    }
 



/**
 * [tSQLDWHOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Carga_adso_rede_gsc Carga_adso_rede_gscClass = new Carga_adso_rede_gsc();

        int exitCode = Carga_adso_rede_gscClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Carga_adso_rede_gsc.class.getClassLoader().getResourceAsStream("gsc/carga_adso_rede_gsc_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Carga_adso_rede_gsc.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}
try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}
try {
errorCode = null;tDBInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Carga_adso_rede_gsc");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     142101 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 de Julho de 2020 10h54min28s BRT
 ************************************************************************************************/